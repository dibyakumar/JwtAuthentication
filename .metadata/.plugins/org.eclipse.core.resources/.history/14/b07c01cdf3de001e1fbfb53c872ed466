package com.auth.config;

import java.io.IOException;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Configuration                    // for each request the OncePerRequestFilter ensures filter-method will be invoked only once 
public class JwtAuthFilter extends OncePerRequestFilter{

	
	
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		/**
		 * When implementing JWT Authentication, checking for the presence of the Bearer keyword in the Authorization header 
		 * is necessary to ensure that the server correctly identifies and processes JWT tokens. 
		 * Since the server might receive various types of tokens or credentials in the Authorization header, 
		 * including API keys, OAuth 2.0 tokens, or other custom tokens, specifying the Bearer scheme helps 
		 * the server distinguish JWT tokens specifically intended for authentication.
		 */
		
		final String authHeader = request.getHeader("Authorization");
		final String jwtToken;
		final String username;								// tokens starts with bearer 
		if(authHeader == null  ||  !authHeader.startsWith("Bearer ")) {
			filterChain.doFilter(request, response);
			return;
		}
										// as 'bearer ' size is 7
		jwtToken = authHeader.substring(7);
		username = "";
	}

}
